buildscript {
    repositories {
        maven {
            url = uri(maven_url)
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("PACKAGE_READ_ONLY_TOKEN")
            }
        }
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'

version = project.mod_version
group = project.mod_group_id

java {
    archivesBaseName = "${mod_name}_${minecraft_version}"
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
}

ext {
    lombok_version = System.getenv("LOMBOK_VERSION") ?: project.findProperty("lombok_version")
    mcqq_tool_version = System.getenv("MCQQ_TOOL_VERSION") ?: project.findProperty("mcqq_tool_version")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

repositories {
    maven {
        url = uri(maven_url)
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("PACKAGE_READ_ONLY_TOKEN")
        }
    }
}

minecraft {

    mappings channel: mod_mapping_channel, version: mod_mapping_version

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                botapi {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                botapi {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'botapi', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                botapi {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url 'https://maven.nova-committee.cn/releases'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    jarJar "com.github.theword.mcqq:mc-qq-tool:[0.0.1,1.0.0)"
    annotationProcessor "com.github.theword.mcqq:mc-qq-tool:${mcqq_tool_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    implementation "com.github.theword.mcqq:mc-qq-tool:${mcqq_tool_version}"
    implementation "org.projectlombok:lombok:${lombok_version}"
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "botapi",
                "Specification-Vendor"    : "cnlimiter",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "cnlimiter",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

jarJar {
    enable()
    dependencies {
        include(dependency(group: 'com.github.theword.mcqq', name: 'mc-qq-tool', version: '0.0.7'))
    }
}
